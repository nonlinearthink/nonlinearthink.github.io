<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vcpkg on nonlinearthink</title><link>https://nonlinearthink.github.io/tags/vcpkg/</link><description>Recent content in Vcpkg on nonlinearthink</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 15 Apr 2023 02:48:00 +0800</lastBuildDate><atom:link href="https://nonlinearthink.github.io/tags/vcpkg/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 vcpkg+CMake+VSCode 编写你的 C++ 项目</title><link>https://nonlinearthink.github.io/p/%E4%BD%BF%E7%94%A8-vcpkg-cmake-vscode-%E7%BC%96%E5%86%99%E4%BD%A0%E7%9A%84-c-%E9%A1%B9%E7%9B%AE/</link><pubDate>Sat, 15 Apr 2023 02:48:00 +0800</pubDate><guid>https://nonlinearthink.github.io/p/%E4%BD%BF%E7%94%A8-vcpkg-cmake-vscode-%E7%BC%96%E5%86%99%E4%BD%A0%E7%9A%84-c-%E9%A1%B9%E7%9B%AE/</guid><description>&lt;p>我最近想要做一些 C++ 的项目，在正式开始之前，我需要先搭建环境，也是大概花了一个晚上，简单了解了一下现在 C++ 项目都是怎么构建的。&lt;/p>
&lt;p>目前比较主流的两种包管理器：conan 和 vcpkg，我都试用了一下，个人感觉 vcpkg 的兼容性更好一些，应该可以帮我避不少坑，所以最终选择了使用 Vcpkg+CMake+VSCode 去构建我的编程环境。&lt;/p>
&lt;p>我参考了 &lt;a class="link" href="https://zhuanlan.zhihu.com/p/350194582" target="_blank" rel="noopener"
>VsCode+Vcpkg+MSVC——C++开发环境配置&lt;/a> 这篇文章，但是他有些地方的坑没讲明白，我重新整理和归纳一下。&lt;/p>
&lt;h2 id="准备">准备
&lt;/h2>&lt;ul>
&lt;li>C++ 编译器
&lt;ul>
&lt;li>Windows: Visual C++(目前使用)、MinGW&lt;/li>
&lt;li>macOS: Clang、GCC&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CMake
&lt;ul>
&lt;li>Windows: &lt;a class="link" href="https://cmake.org/download/" target="_blank" rel="noopener"
>Download | CMake&lt;/a>&lt;/li>
&lt;li>macOS: brew install&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>VSCode
&lt;ul>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools" target="_blank" rel="noopener"
>CMake Tools&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools" target="_blank" rel="noopener"
>C/C++&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="vcpkg">vcpkg
&lt;/h2>&lt;h3 id="安装">安装
&lt;/h3>&lt;p>官方中文文档：&lt;a class="link" href="https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md" target="_blank" rel="noopener"
>vcpkg/README_zh_CN.md at master · microsoft/vcpkg · GitHub&lt;/a>&lt;/p>
&lt;p>阅读&lt;code>快速开始&lt;/code>的部分，按照指令一条条做。&lt;/p>
&lt;h4 id="git-clone-不下来">Git Clone 不下来？
&lt;/h4>&lt;ol>
&lt;li>运用科技手段&lt;/li>
&lt;li>导入项目地址到 Gitee&lt;/li>
&lt;li>Github 镜像下载网站&lt;/li>
&lt;/ol>
&lt;h4 id="运行-bootstrap-vcpkgbat-或者-bootstrap-vcpkgsh-卡住并且报错">运行 &lt;code>bootstrap-vcpkg.bat&lt;/code> 或者 &lt;code>bootstrap-vcpkg.sh&lt;/code> 卡住并且报错？
&lt;/h4>&lt;ol>
&lt;li>运用科技手段&lt;/li>
&lt;li>去这个页面下载 &lt;code>vcpkg.exe&lt;/code>: &lt;a class="link" href="https://github.com/microsoft/vcpkg-tool/releases" target="_blank" rel="noopener"
>Releases · microsoft/vcpkg-tool (github.com)&lt;/a>，然后拷贝到 Clone 下来的 Git 根目录
&lt;blockquote>
&lt;p>macOS 应该是下载 &lt;code>vcpkg-macos&lt;/code>，我没试过&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h3 id="配置环境变量">配置环境变量
&lt;/h3>&lt;p>这一步网上很多人没讲，环境变量可以让后面路径的配置和维护方便很多。&lt;/p>
&lt;p>配置一个叫 &lt;code>VCPKG_ROOT&lt;/code> 的变量，待会要用，地址就是刚才 Clone 的那个 Git 根目录。&lt;/p>
&lt;p>配置完之后检查一下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># powershell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$env:VCPKG_ROOT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># bash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo &lt;/span>&lt;span class="nv">$VCPKG_ROOT&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="安装依赖">安装依赖
&lt;/h3>&lt;p>安装一个库：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">.&lt;span class="se">\v&lt;/span>cpkg.exe install fmt:x86-windows
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装依赖一般就是 &lt;code>[库名]:[编译目标]&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>这里补充一个重点，&lt;strong>一定要选择和自己的编译器一样的编译目标&lt;/strong>，我一开始用了 Visual C++ 的 64 位编译器，结果后面编译的时候一直出问题，因为 &lt;code>x86-windows&lt;/code> 是 32 位的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="添加依赖到-cmake">添加依赖到 CMake
&lt;/h3>&lt;p>切回到 CMake 项目中。&lt;/p>
&lt;p>在 &lt;code>CMakeLists.txt&lt;/code> 中加入两条新的命令，&lt;code>find_package&lt;/code> 和 &lt;code>target_link_libraries&lt;/code>，编辑完之后大概是这个样子的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">project&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">TestVcpkg&lt;/span> &lt;span class="s">VERSION&lt;/span> &lt;span class="s">0.1.0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">......
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">TestVcpkg&lt;/span> &lt;span class="s">main.cpp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">......
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">find_package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">fmt&lt;/span> &lt;span class="s">CONFIG&lt;/span> &lt;span class="s">REQUIRED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">TestVcpkg&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">fmt::fmt&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>target_link_libraries&lt;/code> 必须在 &lt;code>find_package&lt;/code> 和 &lt;code>add_executable&lt;/code> 后面。&lt;/p>
&lt;/blockquote>
&lt;h3 id="测试程序">测试程序
&lt;/h3>&lt;p>引入并使用一下 &lt;code>fmt&lt;/code> 库试试。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;fmt/format.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fmt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, world!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="编译">编译
&lt;/h3>&lt;p>创建一个 CMake 项目，不知道怎么创建，可以参考后面的 VSCode 部分。&lt;/p>
&lt;p>构建项目：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># powershell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="n">-S&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="n">-B&lt;/span> &lt;span class="n">build&lt;/span> &lt;span class="n">-DCMAKE_TOOLCHAIN_FILE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nv">$env:VCPKG_ROOT&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">scripts&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">buildsystems&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">vcpkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">cmake&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># bash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cmake&lt;/span> &lt;span class="n">-S&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="n">-B&lt;/span> &lt;span class="n">build&lt;/span> &lt;span class="n">-DCMAKE_TOOLCHAIN_FILE&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nv">$VCPKG_ROOT&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">scripts&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">buildsystems&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">vcpkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">cmake&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>-B&lt;/code> 后面跟着的是 &lt;code>CMakeLists.txt&lt;/code> 的位置&lt;/li>
&lt;li>&lt;code>-S&lt;/code> 后面跟着的是编译到那个位置，一般都是项目目录下新建一个 &lt;code>build&lt;/code> 目录&lt;/li>
&lt;li>最后跟着的是配置 &lt;code>CMAKE_TOOLCHAIN_FILE&lt;/code>，需要用到之前配置的环境变量 &lt;code>VCPKG_ROOT&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>编译项目：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cmake --build build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="运行">运行
&lt;/h3>&lt;p>找到 &lt;code>build/Debug&lt;/code> 下的可执行文件，运行一下就行了。&lt;/p>
&lt;h3 id="清单模式">清单模式
&lt;/h3>&lt;blockquote>
&lt;p>不使用这个也能用，但是强烈推荐使用&lt;/p>
&lt;/blockquote>
&lt;p>简单来说，就是依赖配置文件，会在你运行 CMake 的时候自动帮你安装依赖。&lt;/p>
&lt;p>务必要看一下这个：&lt;/p>
&lt;p>&lt;a class="link" href="https://learn.microsoft.com/zh-cn/vcpkg/examples/manifest-mode-cmake" target="_blank" rel="noopener"
>使用清单模式入门 | Microsoft Learn&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://learn.microsoft.com/zh-cn/vcpkg/users/manifests" target="_blank" rel="noopener"
>清单模式 | Microsoft Learn&lt;/a>&lt;/p>
&lt;h2 id="vscode">VSCode
&lt;/h2>&lt;p>配置 VSCode 的主要目的是自动化上面的一些命令。&lt;/p>
&lt;h3 id="建立-cmake-项目">建立 Cmake 项目
&lt;/h3>&lt;p>VSCode 打开一个空目录，使用 &lt;code>Ctrl+Shift+P&lt;/code>|&lt;code>⌘+⇧+P&lt;/code> 打开 Command Palette，找到并运行 &lt;code>CMake: Quick Start&lt;/code>。&lt;/p>
&lt;h3 id="vcpkg-加入-cmake-自动化编译流程">vcpkg 加入 CMake 自动化编译流程
&lt;/h3>&lt;p>VSCode 会在你更新 &lt;code>CMakeLists.txt&lt;/code> 的时候帮你自动运行 CMake 命令，为了在运行的时候加入 &lt;code>CMAKE_TOOLCHAIN_FILE&lt;/code> 的设置，你需要编辑 &lt;code>settings.json&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cmake.configureSettings&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;CMAKE_TOOLCHAIN_FILE&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;${env:VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;VCPKG_TARGET_TRIPLET&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;x86-windows&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样配置完之后相当于在 cmake 执行的时候加入了：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">-DCMAKE_TOOLCHAIN_FILE&lt;span class="o">=&lt;/span>&lt;span class="nv">$env&lt;/span>:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET&lt;span class="o">=&lt;/span>x86-windows
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里用到的 &lt;code>${env:VCPKG_ROOT}&lt;/code> 就是上面提到的环境变量，而编译目标，取决于你使用的编译器。&lt;/p>
&lt;blockquote>
&lt;p>可以在 &lt;code>.vscode&lt;/code> 文件夹下新建一个 &lt;code>settings.json&lt;/code>，这样可以给每个项目自定义使用 &lt;code>x64-windows&lt;/code> 还是 &lt;code>x86-windows&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>到这一步为止，保存刷新一下 &lt;code>CMakeLists.txt&lt;/code>，VSCode 应该没有报错，并且成功帮你编译好了 CMake，如果有问题，去检查一下上面的流程，特别是 vcpkg 官方文档的内容我没怎么提，仔细检查一下。&lt;/p>
&lt;h3 id="识别和跳转-include-头文件">识别和跳转 &lt;code>#include&lt;/code> 头文件
&lt;/h3>&lt;p>默认情况下，代码编辑器会有一个报错，&lt;code>#include&lt;/code> 找不到 vcpkg 安装的库，但是执行 Debug 或者 Run 任务，都没有任何问题。&lt;/p>
&lt;p>这是因为 VSCode 没有在 vcpkg 的目录中找头文件。&lt;/p>
&lt;p>再次运行 &lt;code>Ctrl+Shift+P&lt;/code>|&lt;code>⌘+⇧+P&lt;/code> 打开 Command Palette，找到并使用 &lt;code>C/C++: Edit Configurations(JSON)&lt;/code>，它会创建一个 &lt;code>.vscode&lt;/code> 文件夹，里面有一个 &lt;code>c_cpp_properties.json&lt;/code> 文件，编辑其中的内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;configurations&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;includePath&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;${workspaceFolder}/**&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;${env:VCPKG_ROOT}/installed/x64-windows/include&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;${env:VCPKG_ROOT}/installed/x86-windows/include&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很多教程会在这里写上一个 &lt;code>${vcpkgRoot}/x64-windows/include&lt;/code>，其实这个 &lt;code>${vcpkgRoot}&lt;/code> 就是我们上面配置的 &lt;code>${env:VCPKG_ROOT}&lt;/code> 加上 &lt;code>installed&lt;/code>。&lt;/p></description></item></channel></rss>