<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>低代码 on nonlinearthink</title><link>https://nonlinearthink.github.io/tags/%E4%BD%8E%E4%BB%A3%E7%A0%81/</link><description>Recent content in 低代码 on nonlinearthink</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Mar 2024 23:23:06 +0800</lastBuildDate><atom:link href="https://nonlinearthink.github.io/tags/%E4%BD%8E%E4%BB%A3%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>为什么低代码很糟糕</title><link>https://nonlinearthink.github.io/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%BE%88%E7%B3%9F%E7%B3%95/</link><pubDate>Wed, 27 Mar 2024 23:23:06 +0800</pubDate><guid>https://nonlinearthink.github.io/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%BE%88%E7%B3%9F%E7%B3%95/</guid><description>&lt;p>我从毕业后就一直在一家做低代码的公司工作，做低代码是一件非常复杂且糟糕的事情。&lt;/p>
&lt;h2 id="用户视角">用户视角
&lt;/h2>&lt;h3 id="低代码比代码更难学习">低代码比代码更难学习
&lt;/h3>&lt;p>大部分人都会有这样一种感觉，低代码比代码更难学习。&lt;/p>
&lt;p>主要的原因是，代码往往是图灵完备的，虽然实现一个功能可能会非常麻烦，需要编写很多东西，但是你只是写更多的代码，所以诞生了程序员这个职业。&lt;/p>
&lt;p>而低代码的用户往往不是专业性很强的程序员，低代码总是希望用最简单和轻松的方式去完成一件事情。它总是以一个简单的按钮、设置项、操作开始，然后背后不知道做了多少事情。低代码就是预设好很多已经被编排好的流程，然后以一种简单直观的方式暴露给用户。&lt;/p>
&lt;p>这还是在基于你开放的低代码功能是逻辑自洽的基础上，因为实际上，你的流程可能是混乱不堪的，被各种混杂的需求所裹挟，不断增加新的流程。&lt;/p>
&lt;p>&lt;strong>在追求通用性的同时，还在追求易用性。&lt;/strong> 这就是低代码的癌症。&lt;/p>
&lt;p>因为低代码的难学，用户不愿意付出学习成本去使用，导致了低代码平台的推广成本很高。&lt;/p>
&lt;p>到最后，可能只有自己内部的人会使用，然后，用户可能就只能把项目外包给我们？&lt;/p>
&lt;blockquote>
&lt;p>有趣的是，低代码平台被创造出来的最初目的可能并不是卖产品，而是为了更加高效地交付外包项目。低代码平台可能从设计之初就没有优先考虑用户的易用性，而是追求功能丰富，能满足各种用户需求，让交付外包项目更快。&lt;/p>
&lt;/blockquote>
&lt;h3 id="无法满足所有需求">无法满足所有需求
&lt;/h3>&lt;p>现实世界的需求千奇百怪，不要认为仅仅靠低代码就能完成它们。&lt;/p>
&lt;p>有很多的需求都是“脏需求”，没有通用性，仅仅是单个项目的指标，它们不应该被设计到低代码软件中去。一个优秀的低代码平台，只应该做通用的需求，而不是所有需求，不够通用的需求，都应该被定制开发。&lt;/p>
&lt;h2 id="开发视角">开发视角
&lt;/h2>&lt;h3 id="复杂和臃肿的架构">复杂和臃肿的架构
&lt;/h3>&lt;p>我认为低代码和阿里曾经鼓吹的中台的概念非常像，可以说，低代码就是技术中台，但是技术中台不一定是低代码，中台也不止只有技术中台。所以，中台有的问题，低代码也有。&lt;/p>
&lt;blockquote>
&lt;p>阿里因为集团非常庞大，子公司和团队非常多，每个子公司和团队都有自己的业务，其中涉及到很多重复的内容。所以，就希望有一个提供通用服务的中台，然后每个前台的团队就可以利用中台提供的服务，快速实现业务的搭建，而不用自己重复搞一遍。&lt;/p>
&lt;p>这个想法并没有什么问题，看上去可以优化企业的效率。但是，在执行的过程中，遇到了一些问题。&lt;/p>
&lt;p>随着接入的业务越来越多，阿里的中台变得越来越庞大，越来越复杂。很多东西，看上去是一样的，但是具体到更加细节的地方，又不太一样，需要特殊处理、特殊对待。&lt;/p>
&lt;/blockquote>
&lt;p>低代码和中台面对的问题类似，为了处理更多的特殊情况，让这个软件看上去更加“低代码”，不停地编写更加复杂的 &lt;code>if-else&lt;/code>。&lt;/p>
&lt;p>这个问题导致了随着时间的推移，低代码平台的复杂度非常高，整体的架构非常臃肿，外加上迭代久了多多少少会有一些技术债，在后期推进新功能的时候非常困难。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;ul>
&lt;li>从用户的角度来说，低代码很难学，而且还不一定能满足需求。&lt;/li>
&lt;li>从程序员的角度来说，低代码平台只要持续维护下去必然会导致软件变得极其复杂和臃肿。&lt;/li>
&lt;/ul></description></item></channel></rss>