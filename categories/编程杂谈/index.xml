<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程杂谈 on nonlinearthink</title><link>https://nonlinearthink.github.io/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/</link><description>Recent content in 编程杂谈 on nonlinearthink</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Mar 2024 23:23:06 +0800</lastBuildDate><atom:link href="https://nonlinearthink.github.io/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/index.xml" rel="self" type="application/rss+xml"/><item><title>为什么低代码很糟糕</title><link>https://nonlinearthink.github.io/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%BE%88%E7%B3%9F%E7%B3%95/</link><pubDate>Wed, 27 Mar 2024 23:23:06 +0800</pubDate><guid>https://nonlinearthink.github.io/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%BE%88%E7%B3%9F%E7%B3%95/</guid><description>&lt;p>我从毕业后就一直在一家做低代码的公司工作，做低代码是一件非常复杂且糟糕的事情。&lt;/p>
&lt;h2 id="用户视角">用户视角
&lt;/h2>&lt;h3 id="低代码比代码更难学习">低代码比代码更难学习
&lt;/h3>&lt;p>大部分人都会有这样一种感觉，低代码比代码更难学习。&lt;/p>
&lt;p>主要的原因是，代码往往是图灵完备的，虽然实现一个功能可能会非常麻烦，需要编写很多东西，但是你只是写更多的代码，所以诞生了程序员这个职业。&lt;/p>
&lt;p>而低代码的用户往往不是专业性很强的程序员，低代码总是希望用最简单和轻松的方式去完成一件事情。它总是以一个简单的按钮、设置项、操作开始，然后背后不知道做了多少事情。低代码就是预设好很多已经被编排好的流程，然后以一种简单直观的方式暴露给用户。&lt;/p>
&lt;p>这还是在基于你开放的低代码功能是逻辑自洽的基础上，因为实际上，你的流程可能是混乱不堪的，被各种混杂的需求所裹挟，不断增加新的流程。&lt;/p>
&lt;p>&lt;strong>在追求通用性的同时，还在追求易用性。&lt;/strong> 这就是低代码的癌症。&lt;/p>
&lt;p>因为低代码的难学，用户不愿意付出学习成本去使用，导致了低代码平台的推广成本很高。&lt;/p>
&lt;p>到最后，可能只有自己内部的人会使用，然后，用户可能就只能把项目外包给我们？&lt;/p>
&lt;blockquote>
&lt;p>有趣的是，低代码平台被创造出来的最初目的可能并不是卖产品，而是为了更加高效地交付外包项目。低代码平台可能从设计之初就没有优先考虑用户的易用性，而是追求功能丰富，能满足各种用户需求，让交付外包项目更快。&lt;/p>
&lt;/blockquote>
&lt;h3 id="无法满足所有需求">无法满足所有需求
&lt;/h3>&lt;p>现实世界的需求千奇百怪，不要认为仅仅靠低代码就能完成它们。&lt;/p>
&lt;p>有很多的需求都是“脏需求”，没有通用性，仅仅是单个项目的指标，它们不应该被设计到低代码软件中去。一个优秀的低代码平台，只应该做通用的需求，而不是所有需求，不够通用的需求，都应该被定制开发。&lt;/p>
&lt;h2 id="开发视角">开发视角
&lt;/h2>&lt;h3 id="复杂和臃肿的架构">复杂和臃肿的架构
&lt;/h3>&lt;p>我认为低代码和阿里曾经鼓吹的中台的概念非常像，可以说，低代码就是技术中台，但是技术中台不一定是低代码，中台也不止只有技术中台。所以，中台有的问题，低代码也有。&lt;/p>
&lt;blockquote>
&lt;p>阿里因为集团非常庞大，子公司和团队非常多，每个子公司和团队都有自己的业务，其中涉及到很多重复的内容。所以，就希望有一个提供通用服务的中台，然后每个前台的团队就可以利用中台提供的服务，快速实现业务的搭建，而不用自己重复搞一遍。&lt;/p>
&lt;p>这个想法并没有什么问题，看上去可以优化企业的效率。但是，在执行的过程中，遇到了一些问题。&lt;/p>
&lt;p>随着接入的业务越来越多，阿里的中台变得越来越庞大，越来越复杂。很多东西，看上去是一样的，但是具体到更加细节的地方，又不太一样，需要特殊处理、特殊对待。&lt;/p>
&lt;/blockquote>
&lt;p>低代码和中台面对的问题类似，为了处理更多的特殊情况，让这个软件看上去更加“低代码”，不停地编写更加复杂的 &lt;code>if-else&lt;/code>。&lt;/p>
&lt;p>这个问题导致了随着时间的推移，低代码平台的复杂度非常高，整体的架构非常臃肿，外加上迭代久了多多少少会有一些技术债，在后期推进新功能的时候非常困难。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;ul>
&lt;li>从用户的角度来说，低代码很难学，而且还不一定能满足需求。&lt;/li>
&lt;li>从程序员的角度来说，低代码平台只要持续维护下去必然会导致软件变得极其复杂和臃肿。&lt;/li>
&lt;/ul></description></item><item><title>如何编写一篇技术博客</title><link>https://nonlinearthink.github.io/p/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 22 Nov 2023 00:53:17 +0800</pubDate><guid>https://nonlinearthink.github.io/p/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p>我在大一的时候就在博客园和 CSDN 写博客，主要内容是平时上课学的 C 语言算法和一些简单的入门教程。后来我停止了一段时间，因为我意识到自己在生产毫无价值的垃圾。&lt;/p>
&lt;p>写一篇合格的博客不是一件容易的事情，借本文分享一下自己多年写博客的一些经验。&lt;/p>
&lt;h2 id="前期准备">前期准备
&lt;/h2>&lt;h3 id="发掘有价值的话题">发掘有价值的话题
&lt;/h3>&lt;p>什么是有价值的话题？&lt;/p>
&lt;p>一件事的价值本身就因人而异，在技术领域价值的产生是因为有需求，所以一般而言，需求越大，越有价值。但在有一定的需求的情况下，越是困难的工作越有价值，因为困难的工作本身也意味着更少的人能做，在供需关系的影响下，会推高其价值。&lt;/p>
&lt;p>简而言之，&lt;strong>需求越大，难度越大，越有价值&lt;/strong>。&lt;/p>
&lt;p>同时，有一些人可能希望博客拥有一定盈利能力，为自己贡献一部分收入，毕竟自己花了非常多的时间去学习和分享这些资料。&lt;/p>
&lt;blockquote>
&lt;p>有意思的是，在技术领域，需求量最大的一般是入门水平的技术博客。因为有非常多的人学习计算机，他们中的大部分甚至将来不会从事相关的工作。大部分时候，做入门水平的内容，不仅轻松而且还赚钱，这种现象造就了 CSDN 这样离谱的网站。&lt;/p>
&lt;/blockquote>
&lt;p>我知道很多人都鄙视这些大量灌水的入门水平博客，我也不喜欢，但是至少人家是真的懂流量。&lt;/p>
&lt;p>话说回来，我们认为，优秀的博客必然是具有一定原创性的，最好还是具有一定深度的，但是假如你的水平真的有限，那么这两种类型的博客也是可以考虑的：&lt;/p>
&lt;ul>
&lt;li>总结归纳别人的资料（但是要附上所有的参考链接）&lt;/li>
&lt;li>翻译英语社区的内容（要注明为翻译类文章，且附上原文链接）&lt;/li>
&lt;/ul>
&lt;h3 id="建立自己的知识库">建立自己的知识库
&lt;/h3>&lt;p>博客难产的一个重要原因就是肚子里没有墨水，这个不一定是指你不懂这个技术，也可能是你懂这个技术，但是缺乏系统性阐述的资料。&lt;/p>
&lt;p>我们每一个人每天都在不停接收各种非常碎片化的信息，其中的一些可能是鲜为人知的信息，它们可能是具有一定价值的，但是又不足以形成一篇完整的文章。这个时候最好的策略就是存储它们，当有一天，你需要为你的博客准备素材的时候，就不需要到处回忆和寻找了，只需要从你的个人知识库里面复制粘贴就好了。&lt;/p>
&lt;p>常见的知识库有比如国内的语雀，还有国外的 Notion，相对来说，我个人使用 Notion 更多一些。&lt;/p>
&lt;h3 id="成为持续思考的人">成为持续思考的人
&lt;/h3>&lt;p>不会自己独立思考的人是写不出博客的，就算写也只能写出千篇一律的文章。编写原创性的博客的关键要点就是把你自己转化为一个能持续思考的人。&lt;/p>
&lt;p>但是，思考到底是什么呢？什么叫持续思考？&lt;/p>
&lt;p>在我看来，思考是一种状态，意味着你大部分生物能量不再用于其他活动，全部为大脑使用。只要你活着，大脑一定是在运转的，所以如果仅仅是保持大脑的运转是不足以被称之为“思考”的。&lt;/p>
&lt;p>每当你看到一个东西，听到一个东西，触碰到一个东西，你能够立马就进入这样的状态，就可以被称之为“持续思考”了。&lt;/p>
&lt;p>思考是一种习惯，是可以培养的。假如你现在还做不到，那么可以尝试去做，并且保持下去，可能有一天你就突然反应过来自己成为了这样的人。&lt;/p>
&lt;h2 id="编写博客">编写博客
&lt;/h2>&lt;h3 id="设计合理的排版">设计合理的排版
&lt;/h3>&lt;p>这可能是我最想吐槽的一点，因为很多 CSDN 的文章，甚至就是生的文本，完全没有排版可言，有些内容其实还可以的，实在是可惜。&lt;/p>
&lt;p>在我看来，Markdown、LaTex 是每一个程序员的必修课，这世界上没有不写博客的程序员，每一个我曾经的同学，他们都写过博客。&lt;/p>
&lt;p>在必要的时候，也可以使用 Markdown 引擎的 HTML 功能来丰富文章的排版。还有，不要忘记 TOC，主要是针对自建网站的同学，大部分博客管理网站都会自动生成。&lt;/p>
&lt;h3 id="学会编写总结">学会编写总结
&lt;/h3>&lt;p>新手的博客往往都是没有总结的，总结是一个非常好的习惯，不仅仅是在写博客的时候，平时你在和其他人交流工作的时候也可以尝试使用总结，可以更好地传达你需要表达的意思。&lt;/p>
&lt;blockquote>
&lt;p>总结往往提醒别人，接下来的事情是重点。这样别人就会用更高的注意力去接收信息。&lt;/p>
&lt;/blockquote>
&lt;p>有一个误区是，很多人认为总结只是复制粘贴文章中的关键信息，但实际上，总结也可以帮助你在完成最终的博客前对文章脉络做一个梳理，帮助你思考文章的结构是否合理，有时候，总结可能还会促使你回去重新调整文章的结构，以增强文章的可读性。&lt;/p>
&lt;h3 id="标注参考资料">标注参考资料
&lt;/h3>&lt;p>新手的博客往往是没有参考资料的，但是这可能是你人生中非常重要的一课：&lt;/p>
&lt;blockquote>
&lt;p>你得要学会尊重别人的成果，这样别人才会尊重你的成果。&lt;/p>
&lt;/blockquote>
&lt;p>有一个问题，是否需要严格按照论文的形式写博客？&lt;/p>
&lt;p>对于这个问题，如果你对自己的要求足够高，那么可以尝试严格使用论文格式去编写博客，但是很多博客并不是什么非常正式的内容，就像这篇文章，可能只是我临时起意，写下来的一些想法。所以我的主张是，你能真实地标注出你所引用的资料，就已经赢过大部分的人了。&lt;/p>
&lt;h2 id="发布博客">发布博客
&lt;/h2>&lt;h3 id="博客框架和主题并不重要">博客框架和主题并不重要
&lt;/h3>&lt;p>我在学生时代玩过不少的博客框架和主题，每一次升级那些主题的新版本，总是要花费我大量的时间去校对配置项，正是因为有了太多边边角角的东西，导致我忘记了最根本的事情：自己是来写博客的。&lt;/p>
&lt;p>有时候，你可能还会使用一些特有的 Markdown 语法，这真的很糟糕，因为当你要去迁移到别的框架或者主题的时候，你就要回去检查以前博客的内容。在搭建技术博客的时候，要规避使用主题特有的一些功能。因为你不知道自己未来会使用怎么样的框架和主题。&lt;/p>
&lt;p>但是，这并不代表我们不需要挑选博客框架和主题。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>我使用 Hugo 框架是因为我喜欢它有优秀的性能，可以非常快速渲染大量博客。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我使用 Stack 主题是因为它提供了开箱即用的模板，并且高度自动化。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack-starter" target="_blank" rel="noopener"
>Hugo Theme Stack Starter Template&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="不要泄露自己的隐私">不要泄露自己的隐私
&lt;/h3>&lt;p>在一些博客框架和主题里面，可能需要配置一些密钥等敏感信息，才能使用，比如一些评论系统。有些人会直接把这个信息提交到公共仓库里面，这样有安全风险。&lt;/p>
&lt;p>我的建议是把博客存储仓库和部署仓库分离，并且分离之后把存储仓库设置为私密，不过部署仓库必须设置为公开，这样才可以挂载到 Github Pages 上。&lt;/p>
&lt;p>假如你使用了 Github Actions 来自动化部署，那么可能还需要权限才能向私有仓库提交代码。&lt;/p>
&lt;p>参考 Github 官方文档：&lt;a class="link" href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions" target="_blank" rel="noopener"
>Using secrets in GitHub Actions&lt;/a>&lt;/p>
&lt;p>先在自己的部署仓库里面创建一个 DEPLOY_KEY，记得勾选写入权限。&lt;/p>
&lt;p>&lt;img src="https://nonlinearthink.github.io/p/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/deploy-key.jpg"
width="1690"
height="1102"
srcset="https://nonlinearthink.github.io/p/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/deploy-key_hu505627e79330b216626219848153253c_72444_480x0_resize_q75_box.jpg 480w, https://nonlinearthink.github.io/p/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/deploy-key_hu505627e79330b216626219848153253c_72444_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="DEPLOY KEY"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>然后在自己的存储仓库里面创建一个 secrets，其值就是上面的 DEPLOY_KEY 的值：&lt;/p>
&lt;p>&lt;img src="https://nonlinearthink.github.io/p/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/action-secrets.jpg"
width="1669"
height="1134"
srcset="https://nonlinearthink.github.io/p/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/action-secrets_hudeb21a84b02620414653d8485bcf5302_99617_480x0_resize_q75_box.jpg 480w, https://nonlinearthink.github.io/p/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/action-secrets_hudeb21a84b02620414653d8485bcf5302_99617_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="ACTION SECRETS"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;p>然后，就可以在 Github Actions 部署的时候加上一个 DEPLOY_KEY：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- name: Deploy 🚀
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: JamesIves/github-pages-deploy-action@v4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repository-name: nonlinearthink/nonlinearthink.github.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branch: master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssh-key: ${{ secrets.DEPLOY_KEY }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> folder: public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clean: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> single-commit: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结
&lt;/h2>&lt;p>祝大家都可以编写出优秀的博客！&lt;/p></description></item></channel></rss>